{"version":3,"file":"static/js/660.e52229d8.chunk.js","mappings":"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","sources":["components/QuestionComponents/QuestionInput/interface.ts","components/QuestionComponents/QuestionInput/Component.tsx","components/QuestionComponents/QuestionInput/PropComponent.tsx","components/QuestionComponents/QuestionInput/index.ts","components/QuestionComponents/QuestionTitle/interface.ts","components/QuestionComponents/QuestionTitle/Component.tsx","components/QuestionComponents/QuestionTitle/PropComponent.tsx","components/QuestionComponents/QuestionTitle/index.ts","components/QuestionComponents/QuestionParagraph/interface.ts","components/QuestionComponents/QuestionParagraph/Component.tsx","components/QuestionComponents/QuestionParagraph/PropComponent.tsx","components/QuestionComponents/QuestionParagraph/index.ts","components/QuestionComponents/QuestionInfo/interface.ts","components/QuestionComponents/QuestionInfo/Component.tsx","components/QuestionComponents/QuestionInfo/PropComponent.tsx","components/QuestionComponents/QuestionInfo/index.ts","components/QuestionComponents/QuestionTextarea/interface.ts","components/QuestionComponents/QuestionTextarea/Component.tsx","components/QuestionComponents/QuestionTextarea/index.ts","components/QuestionComponents/QuestionTextarea/PropComponent.tsx","components/QuestionComponents/QuestionRadio/interface.ts","components/QuestionComponents/QuestionRadio/Component.tsx","components/QuestionComponents/QuestionRadio/PropComponent.tsx","components/QuestionComponents/QuestionRadio/StatComponent.tsx","components/QuestionComponents/QuestionRadio/index.ts","components/QuestionComponents/QuestionCheckbox/interface.ts","components/QuestionComponents/QuestionCheckbox/Component.tsx","components/QuestionComponents/QuestionCheckbox/PropComponent.tsx","components/QuestionComponents/QuestionCheckbox/StatComponent.tsx","components/QuestionComponents/QuestionCheckbox/index.ts","components/QuestionComponents/index.ts","hooks/useGetComponentInfo.ts","hooks/useGetPageInfo.ts","hooks/useLoadQuestionData.ts"],"sourcesContent":["export type QuestionInputPropsType = {\n  title?: string\n  placeholder?: string\n\n  onChange?: (newProps: QuestionInputPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionInputDefaultProps: QuestionInputPropsType = {\n  title: '输入框标题',\n  placeholder: '请输入...',\n}\n","import React, { FC } from 'react'\nimport { Typography, Input } from 'antd'\nimport { QuestionInputPropsType, QuestionInputDefaultProps } from './interface'\n\nconst { Paragraph } = Typography\n\nconst QuestionInput: FC<QuestionInputPropsType> = (props: QuestionInputPropsType) => {\n  const { title, placeholder } = { ...QuestionInputDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <Input placeholder={placeholder}></Input>\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionInput\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input } from 'antd'\nimport { QuestionInputPropsType } from './interface'\n\nconst PropComponent: FC<QuestionInputPropsType> = (props: QuestionInputPropsType) => {\n  const { title, placeholder, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder })\n  }, [title, placeholder])\n\n  function handleValuesChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      form={form}\n      onValuesChange={handleValuesChange}\n      disabled={disabled}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"Placeholder\" name=\"placeholder\">\n        <Input />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷 输入框\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport { QuestionInputDefaultProps } from './interface'\n\nexport * from './interface'\n\n// Input 组件的配置\nexport default {\n  title: '输入框',\n  type: 'questionInput', // 要和后端统一好\n  Component, // 画布显示的组件\n  PropComponent, // 修改属性\n  defaultProps: QuestionInputDefaultProps,\n}\n","export type QuestionTitlePropsType = {\n  text?: string\n  level?: 1 | 2 | 3 | 4 | 5\n  isCenter?: boolean\n\n  onChange?: (newProps: QuestionTitlePropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionTitleDefaultProps: QuestionTitlePropsType = {\n  text: '一行标题',\n  level: 1,\n  isCenter: false,\n}\n","import React, { FC } from 'react'\nimport { Typography } from 'antd'\nimport { QuestionTitlePropsType, QuestionTitleDefaultProps } from './interface'\n\nconst { Title } = Typography\n\nconst QuestionTitle: FC<QuestionTitlePropsType> = (props: QuestionTitlePropsType) => {\n  const { text = '', level = 1, isCenter = false } = { ...QuestionTitleDefaultProps, ...props }\n\n  const genFontSize = (level: number) => {\n    if (level === 1) return '24px'\n    if (level === 2) return '20px'\n    if (level === 3) return '16px'\n    return '16px'\n  }\n\n  return (\n    <Title\n      level={level}\n      style={{\n        textAlign: isCenter ? 'center' : 'start',\n        marginBottom: '0',\n        fontSize: genFontSize(level),\n      }}\n    >\n      {text}\n    </Title>\n  )\n}\n\nexport default QuestionTitle\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input, Select, Checkbox } from 'antd'\nimport { QuestionTitlePropsType } from './interface'\n\nconst PropComponent: FC<QuestionTitlePropsType> = (props: QuestionTitlePropsType) => {\n  const { text, level, isCenter, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({\n      text,\n      level,\n      isCenter,\n    })\n  }, [text, level, isCenter])\n\n  function handleValueChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onValuesChange={handleValueChange}\n      initialValues={{ text, level, isCenter }}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题内容\"\n        name=\"text\"\n        rules={[{ required: true, message: '请输入标题内容' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"层级\" name=\"level\">\n        <Select\n          options={[\n            { value: 1, text: 1 },\n            { value: 2, text: 2 },\n            { value: 3, text: 3 },\n          ]}\n        ></Select>\n      </Form.Item>\n      <Form.Item name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中显示</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷 标题\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport { QuestionTitleDefaultProps } from './interface'\n\nexport * from './interface'\n\n// Title 组件的配置\nexport default {\n  title: '标题',\n  type: 'questionTitle', // 要和后端统一好\n  Component,\n  PropComponent,\n  defaultProps: QuestionTitleDefaultProps,\n}\n","export type QuestionParagraphPropsType = {\n  text?: string\n  isCenter?: boolean\n\n  // 用于 PropComponent\n  onChange?: (newProps: QuestionParagraphPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionParagraphDefaultProps: QuestionParagraphPropsType = {\n  text: '一行段落',\n  isCenter: false,\n}\n","import React, { FC } from 'react'\nimport { Typography } from 'antd'\nimport { QuestionParagraphPropsType, QuestionParagraphDefaultProps } from './interface'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionParagraphPropsType> = (props: QuestionParagraphPropsType) => {\n  const { text = '', isCenter = false } = { ...QuestionParagraphDefaultProps, ...props }\n\n  // 尽量不要使用 dangerouslySetInnerHTML ，不安全\n\n  const textList = text.split('\\n') // 例如 ['hello', '123', '456']\n\n  return (\n    <Paragraph style={{ textAlign: isCenter ? 'center' : 'start', marginBottom: '0' }}>\n      {textList.map((t, index) => (\n        <span key={index}>\n          {index > 0 && <br />}\n          {t}\n        </span>\n      ))}\n    </Paragraph>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input, Checkbox } from 'antd'\nimport { QuestionParagraphPropsType } from './interface'\n\nconst { TextArea } = Input\n\nconst PropComponent: FC<QuestionParagraphPropsType> = (props: QuestionParagraphPropsType) => {\n  const { text, isCenter, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ text, isCenter })\n  }, [text, isCenter])\n\n  function handleValuesChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ text, isCenter }}\n      onValuesChange={handleValuesChange}\n      disabled={disabled}\n      form={form}\n    >\n      <Form.Item\n        label=\"段落内容\"\n        name=\"text\"\n        rules={[{ required: true, message: '请输入段落内容' }]}\n      >\n        <TextArea />\n      </Form.Item>\n      <Form.Item name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中显示</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷 - 段落\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport { QuestionParagraphDefaultProps } from './interface'\n\nexport * from './interface'\n\n// Paragraph 组件的配置\nexport default {\n  title: '段落',\n  type: 'questionParagraph', // 要和后端统一好\n  Component,\n  PropComponent,\n  defaultProps: QuestionParagraphDefaultProps,\n}\n","export type QuestionInfoPropsType = {\n  title?: string\n  desc?: string\n\n  // 用于 PropComponent\n  onChange?: (newProps: QuestionInfoPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionInfoDefaultProps: QuestionInfoPropsType = {\n  title: '问卷标题',\n  desc: '问卷描述',\n}\n","import React, { FC } from 'react'\nimport { Typography } from 'antd'\nimport { QuestionInfoPropsType, QuestionInfoDefaultProps } from './interface'\n\nconst { Title, Paragraph } = Typography\n\nconst Component: FC<QuestionInfoPropsType> = (props: QuestionInfoPropsType) => {\n  const { title, desc = '' } = { ...QuestionInfoDefaultProps, ...props }\n\n  const descTextList = desc.split('\\n')\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Title style={{ fontSize: '24px' }}>{title}</Title>\n      <Paragraph>\n        {descTextList.map((t, index) => (\n          <span key={index}>\n            {index > 0 && <br />}\n            {t}\n          </span>\n        ))}\n      </Paragraph>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input } from 'antd'\nimport { QuestionInfoPropsType } from './interface'\n\nconst { TextArea } = Input\n\nconst PropComponent: FC<QuestionInfoPropsType> = (props: QuestionInfoPropsType) => {\n  const { title, desc, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ title, desc })\n  }, [title, desc])\n\n  function handleValuesChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ title, desc }}\n      onValuesChange={handleValuesChange}\n      disabled={disabled}\n      form={form}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入问卷标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"描述\" name=\"desc\">\n        <TextArea />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷 info 组件\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport { QuestionInfoDefaultProps } from './interface'\n\nexport * from './interface'\n\nexport default {\n  title: '问卷信息',\n  type: 'questionInfo',\n  Component,\n  PropComponent,\n  defaultProps: QuestionInfoDefaultProps,\n}\n","export type QuestionTextareaPropsType = {\n  title?: string\n  placeholder?: string\n\n  onChange?: (newProps: QuestionTextareaPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionTextareaDefaultProps: QuestionTextareaPropsType = {\n  title: '输入框标题',\n  placeholder: '请输入...',\n}\n","import React, { FC } from 'react'\nimport { Typography, Input } from 'antd'\nimport { QuestionTextareaPropsType, QuestionTextareaDefaultProps } from './interface'\n\nconst { Paragraph } = Typography\nconst { TextArea } = Input\n\nconst QuestionTextarea: FC<QuestionTextareaPropsType> = (props: QuestionTextareaPropsType) => {\n  const { title, placeholder } = { ...QuestionTextareaDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <TextArea placeholder={placeholder}></TextArea>\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionTextarea\n","/**\n * @description 问卷 多行输入\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport { QuestionTextareaDefaultProps } from './interface'\n\nexport * from './interface'\n\n// Textarea 组件的配置\nexport default {\n  title: '多行输入',\n  type: 'questionTextarea', // 要和后端统一好\n  Component, // 画布显示的组件\n  PropComponent, // 修改属性\n  defaultProps: QuestionTextareaDefaultProps,\n}\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input } from 'antd'\nimport { QuestionTextareaPropsType } from './interface'\n\nconst PropComponent: FC<QuestionTextareaPropsType> = (props: QuestionTextareaPropsType) => {\n  const { title, placeholder, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder })\n  }, [title, placeholder])\n\n  function handleValuesChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      form={form}\n      onValuesChange={handleValuesChange}\n      disabled={disabled}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"Placeholder\" name=\"placeholder\">\n        <Input />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","export type OptionType = {\n  value: string\n  text: string\n}\n\nexport type QuestionRadioPropsType = {\n  title?: string\n  isVertical?: boolean\n  options?: OptionType[]\n  value?: string\n\n  // 用于 PropComponent\n  onChange?: (newProps: QuestionRadioPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionRadioDefaultProps: QuestionRadioPropsType = {\n  title: '单选标题',\n  isVertical: false,\n  options: [\n    { value: 'item1', text: '选项1' },\n    { value: 'item2', text: '选项2' },\n    { value: 'item3', text: '选项3' },\n  ],\n  value: '',\n}\n\n// 统计组件的属性类型\nexport type QuestionRadioStatPropsType = {\n  stat: Array<{ name: string; count: number }>\n}\n","import React, { FC } from 'react'\nimport { Typography, Radio, Space } from 'antd'\nimport { QuestionRadioPropsType, QuestionRadioDefaultProps } from './interface'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionRadioPropsType> = (props: QuestionRadioPropsType) => {\n  const { title, options = [], value, isVertical } = { ...QuestionRadioDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <Radio.Group value={value}>\n        <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n          {options.map(opt => {\n            const { value, text } = opt\n            return (\n              <Radio key={value} value={value}>\n                {text}\n              </Radio>\n            )\n          })}\n        </Space>\n      </Radio.Group>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { nanoid } from 'nanoid'\nimport { Form, Input, Checkbox, Select, Button, Space } from 'antd'\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons'\nimport { QuestionRadioPropsType, OptionType } from './interface'\n\nconst PropComponent: FC<QuestionRadioPropsType> = (props: QuestionRadioPropsType) => {\n  const { title, isVertical, value, options = [], onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ title, isVertical, value, options })\n  }, [title, isVertical, value, options])\n\n  function handleValuesChange() {\n    if (onChange == null) return\n    // 触发 onChange 函数\n    const newValues = form.getFieldsValue() as QuestionRadioPropsType\n\n    if (newValues.options) {\n      // 需要清除 text undefined 的选项\n      newValues.options = newValues.options.filter(opt => !(opt.text == null))\n    }\n\n    const { options = [] } = newValues\n    options.forEach(opt => {\n      if (opt.value) return\n      opt.value = nanoid(5) // 补齐 opt value\n    })\n\n    onChange(newValues)\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ title, isVertical, value, options }}\n      onValuesChange={handleValuesChange}\n      disabled={disabled}\n      form={form}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"options\">\n          {(fields, { add, remove }) => (\n            <>\n              {/* 遍历所有的选项（可删除） */}\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    {/* 当前选项 输入框 */}\n                    <Form.Item\n                      name={[name, 'text']}\n                      rules={[\n                        { required: true, message: '请输入选项文字' },\n                        {\n                          validator: (_, text) => {\n                            const { options = [] } = form.getFieldsValue()\n                            let num = 0\n                            options.forEach((opt: OptionType) => {\n                              if (opt.text === text) num++ // 记录 text 相同的个数，预期只有 1 个（自己）\n                            })\n                            if (num === 1) return Promise.resolve()\n                            return Promise.reject(new Error('和其他选项重复了'))\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"输入选项文字...\" />\n                    </Form.Item>\n\n                    {/* 当前选项 删除按钮 */}\n                    {index > 1 && <MinusCircleOutlined onClick={() => remove(name)} />}\n                  </Space>\n                )\n              })}\n\n              {/* 添加选项 */}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  onClick={() => add({ text: '', value: '' })}\n                  icon={<PlusOutlined />}\n                  block\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n      <Form.Item label=\"默认选中\" name=\"value\">\n        <Select\n          value={value}\n          options={options.map(({ text, value }) => ({ value, label: text || '' }))}\n        ></Select>\n      </Form.Item>\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","import React, { FC, useMemo } from 'react'\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts'\nimport { STAT_COLORS } from '../../../constant'\nimport { QuestionRadioStatPropsType } from './interface'\n\nfunction format(n: number) {\n  return (n * 100).toFixed(2)\n}\n\nconst StatComponent: FC<QuestionRadioStatPropsType> = ({ stat = [] }) => {\n  // count 求和\n  const sum = useMemo(() => {\n    let s = 0\n    stat.forEach(i => (s += i.count))\n    return s\n  }, [stat])\n\n  return (\n    <div style={{ width: '300px', height: '400px' }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            dataKey=\"count\"\n            data={stat}\n            cx=\"50%\" // x 轴的偏移\n            cy=\"50%\" // y 轴的偏移\n            outerRadius={50} // 饼图的直径\n            fill=\"#8884d8\"\n            label={i => `${i.name}: ${format(i.count / sum)}%`}\n          >\n            {stat.map((i, index) => {\n              return <Cell key={index} fill={STAT_COLORS[index]} />\n            })}\n          </Pie>\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default StatComponent\n","/**\n * @description 问卷 radio\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport StatComponent from './StatComponent'\nimport { QuestionRadioDefaultProps } from './interface'\n\nexport * from './interface'\n\nexport default {\n  title: '单选',\n  type: 'questionRadio',\n  Component,\n  PropComponent,\n  defaultProps: QuestionRadioDefaultProps,\n  StatComponent,\n}\n","export type OptionType = {\n  value: string\n  text: string\n  checked: boolean\n}\n\nexport type QuestionCheckboxPropsType = {\n  title?: string\n  isVertical?: boolean\n  list?: OptionType[]\n\n  // 用于 PropComponent\n  onChange?: (newProps: QuestionCheckboxPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionCheckboxDefaultProps: QuestionCheckboxPropsType = {\n  title: '多选标题',\n  isVertical: false,\n  list: [\n    { value: 'item1', text: '选项1', checked: false },\n    { value: 'item2', text: '选项2', checked: false },\n    { value: 'item3', text: '选项3', checked: false },\n  ],\n}\n\n// 统计组件的属性类型\nexport type QuestionCheckboxStatPropsType = {\n  stat: Array<{ name: string; count: number }>\n}\n","import React, { FC } from 'react'\nimport { Typography, Space, Checkbox } from 'antd'\nimport { QuestionCheckboxDefaultProps, QuestionCheckboxPropsType } from './interface'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionCheckboxPropsType> = (props: QuestionCheckboxPropsType) => {\n  const { title, isVertical, list = [] } = { ...QuestionCheckboxDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n        {list.map(opt => {\n          const { value, text, checked } = opt\n          return (\n            <Checkbox key={value} value={value} checked={checked}>\n              {text}\n            </Checkbox>\n          )\n        })}\n      </Space>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC } from 'react'\nimport { Form, Input, Checkbox, Space, Button } from 'antd'\nimport { nanoid } from 'nanoid'\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\nimport { QuestionCheckboxPropsType, OptionType } from './interface'\n\nconst PropComponent: FC<QuestionCheckboxPropsType> = (props: QuestionCheckboxPropsType) => {\n  const { title, isVertical, list = [], onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  function handleValuesChange() {\n    if (onChange == null) return\n\n    const newValues = form.getFieldsValue() as QuestionCheckboxPropsType\n\n    if (newValues.list) {\n      newValues.list = newValues.list.filter(opt => !(opt.text == null))\n    }\n\n    const { list = [] } = newValues\n    list.forEach(opt => {\n      if (opt.value) return\n      opt.value = nanoid(5)\n    })\n\n    onChange(newValues)\n  }\n\n  return (\n    <Form\n      layout=\"vertical\"\n      form={form}\n      initialValues={{ title, isVertical, list }}\n      disabled={disabled}\n      onValuesChange={handleValuesChange}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => (\n            <>\n              {/* 遍历所有的选项（可删除） */}\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    {/* 当前选项 是否选中 */}\n                    <Form.Item name={[name, 'checked']} valuePropName=\"checked\">\n                      <Checkbox />\n                    </Form.Item>\n                    {/* 当前选项 输入框 */}\n                    <Form.Item\n                      name={[name, 'text']}\n                      rules={[\n                        { required: true, message: '请输入选项文字' },\n                        {\n                          validator: (_, text) => {\n                            const { list = [] } = form.getFieldsValue()\n                            let num = 0\n                            list.forEach((opt: OptionType) => {\n                              if (opt.text === text) num++ // 记录 text 相同的个数，预期只有 1 个（自己）\n                            })\n                            if (num === 1) return Promise.resolve()\n                            return Promise.reject(new Error('和其他选项重复了'))\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"输入选项文字...\" />\n                    </Form.Item>\n\n                    {/* 当前选项 删除按钮 */}\n                    {index > 0 && <MinusCircleOutlined onClick={() => remove(name)} />}\n                  </Space>\n                )\n              })}\n\n              {/* 添加选项 */}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  onClick={() => add({ text: '', value: '', checked: false })}\n                  icon={<PlusOutlined />}\n                  block\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","import React, { FC } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\nimport { QuestionCheckboxStatPropsType } from './interface'\n\nconst StatComponent: FC<QuestionCheckboxStatPropsType> = ({ stat }) => {\n  return (\n    <div style={{ width: '400px', height: '300px' }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n          width={400}\n          height={300}\n          data={stat}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          {/* <Legend /> */}\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default StatComponent\n","/**\n * @description 问卷 checkbox\n * @author 双越老师\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport StatComponent from './StatComponent'\nimport { QuestionCheckboxDefaultProps } from './interface'\n\nexport * from './interface'\n\nexport default {\n  title: '多选',\n  type: 'questionCheckbox', // 要和后端统一好\n  Component,\n  PropComponent,\n  StatComponent,\n  defaultProps: QuestionCheckboxDefaultProps,\n}\n","import type { FC } from 'react'\nimport QuestionInputConf, { QuestionInputPropsType } from './QuestionInput/index'\nimport QuestionTitleConf, { QuestionTitlePropsType } from './QuestionTitle'\nimport QuestionParagraphConf, { QuestionParagraphPropsType } from './QuestionParagraph'\nimport QuestionInfoConf, { QuestionInfoPropsType } from './QuestionInfo'\nimport QuestionTextareaConf, { QuestionTextareaPropsType } from './QuestionTextarea'\nimport QuestionRadioConf, {\n  QuestionRadioPropsType,\n  QuestionRadioStatPropsType,\n} from './QuestionRadio'\nimport QuestionCheckboxConf, {\n  QuestionCheckboxPropsType,\n  QuestionCheckboxStatPropsType,\n} from './QuestionCheckbox'\n\n// 统一，各个组件的 prop type\nexport type ComponentPropsType = QuestionInputPropsType &\n  QuestionTitlePropsType &\n  QuestionParagraphPropsType &\n  QuestionInfoPropsType &\n  QuestionTextareaPropsType &\n  QuestionRadioPropsType &\n  QuestionCheckboxPropsType\n\n// 统一，各个组件的统计属性类型\ntype ComponentStatPropsType = QuestionRadioStatPropsType & QuestionCheckboxStatPropsType\n\n// 统一，组件的配置 type\nexport type ComponentConfType = {\n  title: string\n  type: string\n  Component: FC<ComponentPropsType>\n  PropComponent: FC<ComponentPropsType>\n  defaultProps: ComponentPropsType\n  StatComponent?: FC<ComponentStatPropsType>\n}\n\n// 全部的组件配置的列表\nconst componentConfList: ComponentConfType[] = [\n  QuestionInputConf,\n  QuestionTitleConf,\n  QuestionParagraphConf,\n  QuestionInfoConf,\n  QuestionTextareaConf,\n  QuestionRadioConf,\n  QuestionCheckboxConf,\n]\n\n// 组件分组\nexport const componentConfGroup = [\n  {\n    groupId: 'textGroup',\n    groupName: '文本显示',\n    components: [QuestionInfoConf, QuestionTitleConf, QuestionParagraphConf],\n  },\n  {\n    groupId: 'inputGroup',\n    groupName: '用户输入',\n    components: [QuestionInputConf, QuestionTextareaConf],\n  },\n  {\n    groupId: 'chooseGroup',\n    groupName: '用户选择',\n    components: [QuestionRadioConf, QuestionCheckboxConf],\n  },\n]\n\nexport function getComponentConfByType(type: string) {\n  return componentConfList.find(c => c.type === type)\n}\n","import { useSelector } from 'react-redux'\nimport { StateType } from '../store'\nimport { ComponentsStateType } from '../store/componentsReducer'\n\nfunction useGetComponentInfo() {\n  // redux store\n  const components = useSelector<StateType>(\n    state => state.components.present\n  ) as ComponentsStateType\n\n  const { componentList = [], selectedId, copiedComponent } = components\n\n  const selectedComponent = componentList.find(c => c.fe_id === selectedId)\n\n  return {\n    componentList,\n    selectedId,\n    selectedComponent,\n    copiedComponent,\n  }\n}\n\nexport default useGetComponentInfo\n","import { useSelector } from 'react-redux'\nimport type { StateType } from '../store'\nimport type { PageInfoType } from '../store/pageInfoReducer'\n\nfunction useGetPageInfo() {\n  const pageInfo = useSelector<StateType>(state => state.pageInfo) as PageInfoType\n  return pageInfo\n}\n\nexport default useGetPageInfo\n","import { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useRequest } from 'ahooks'\nimport { useDispatch } from 'react-redux'\nimport { getQuestionService } from '../services/question'\nimport { resetComponents } from '../store/componentsReducer'\nimport { resetPageInfo } from '../store/pageInfoReducer'\n\nfunction useLoadQuestionData() {\n  const { id = '' } = useParams()\n  const dispatch = useDispatch()\n\n  // ajax 加载\n  const { data, loading, error, run } = useRequest(\n    async (id: string) => {\n      if (!id) throw new Error('没有问卷 id')\n      const data = await getQuestionService(id)\n      return data\n    },\n    {\n      manual: true,\n    }\n  )\n\n  // 根据获取的 data 设置 redux store\n  useEffect(() => {\n    if (!data) return\n\n    const {\n      title = '',\n      desc = '',\n      js = '',\n      css = '',\n      isPublished = false,\n      componentList = [],\n    } = data\n\n    // 获取默认的 selectedId\n    let selectedId = ''\n    if (componentList.length > 0) {\n      selectedId = componentList[0].fe_id // 默认选中第一个组件\n    }\n\n    // 把 componentList 存储到 Redux store 中\n    dispatch(resetComponents({ componentList, selectedId, copiedComponent: null }))\n\n    // 把 pageInfo 存储到 redux store\n    dispatch(resetPageInfo({ title, desc, js, css, isPublished }))\n  }, [data])\n\n  // 判断 id 变化，执行 ajax 加载问卷数据\n  useEffect(() => {\n    run(id)\n  }, [id])\n\n  return { loading, error }\n}\n\nexport default useLoadQuestionData\n"],"names":["QuestionInputDefaultProps","title","placeholder","Paragraph","Typography","props","_jsxs","children","_jsx","strong","Input","type","Component","PropComponent","onChange","disabled","form","Form","useForm","useEffect","setFieldsValue","layout","initialValues","onValuesChange","getFieldsValue","Item","label","name","rules","required","message","defaultProps","QuestionTitleDefaultProps","text","level","isCenter","Title","style","textAlign","marginBottom","fontSize","genFontSize","Select","options","value","valuePropName","Checkbox","QuestionParagraphDefaultProps","textList","split","map","t","index","TextArea","QuestionInfoDefaultProps","desc","descTextList","QuestionTextareaDefaultProps","QuestionRadioDefaultProps","isVertical","Radio","Space","direction","opt","newValues","filter","forEach","nanoid","List","fields","_ref","add","remove","_Fragment","_ref2","key","align","validator","_","num","Promise","resolve","reject","Error","MinusCircleOutlined","onClick","Button","icon","PlusOutlined","block","_ref3","StatComponent","stat","sum","useMemo","s","i","count","width","height","ResponsiveContainer","PieChart","Pie","dataKey","data","cx","cy","outerRadius","fill","concat","toFixed","Cell","STAT_COLORS","Tooltip","QuestionCheckboxDefaultProps","list","checked","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Bar","componentConfList","QuestionInputConf","QuestionTitleConf","QuestionParagraphConf","QuestionInfoConf","QuestionTextareaConf","QuestionRadioConf","QuestionCheckboxConf","componentConfGroup","groupId","groupName","components","getComponentConfByType","find","c","useSelector","state","present","componentList","selectedId","copiedComponent","selectedComponent","fe_id","pageInfo","id","useParams","dispatch","useDispatch","loading","error","run","useRequest","async","getQuestionService","manual","js","css","isPublished","length","resetComponents","resetPageInfo"],"sourceRoot":""}